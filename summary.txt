.git : 버전관리를 하게되면 여러가지 정보들이 생성되는데 생성된 정보는 이 디렉토리에 저장됨
ls -al : 디렉토리 내부 파일 확인
git init : 현재 디렉토리를 버전관리
vim : 텍스트 편집기
git status : 깃의 저장소 상태 확인
untracked : 추적되고 있지 않다. , 버전관리 되고 있지 않다.
git add : 특정 파일 버전관리 시작, 새로운 파일이나 수정된 파일이 생길 때 그 파일의 버전관리를 깃에게 명령
버전 : 의미있는 변화, 어떤 작업이 있으면 그 작업이 완결된 상태
git config -- global user.name : 내가 만든 버전들이 내가 만든 것임을 다른 사람들에게 알리기 위해 이름을 세팅
git commit : 파일들이 왜 변경되었는지 이유를 적는 것, 커밋 메시지
git log : 버전이 잘 만들어졌는지 확인
cp f1.txt f2.txt : f1.txt와 똑같은 파일 f2.txt 복사
commit 하기 전에 git add를 하는이유
: 프로젝트를 하다보면 여러 소스코드를 수정한다. 수정하다보면 커밋할 시기를 놓칠때가 있음
내가 커밋 하고싶은 파일만 add를 통해 커밋할수있음
stage area : commit 대기 되는 파일들이 가는 곳, git add를 쓰면 커밋 대기 상태로 만듬
즉 git add를 쓰면 특정 파일을 stage area로 보내버림
repository : commit 된 결과들이 가는 곳, 저장소
git log -p : 각각의 커밋 사이에 소스의 차이점을 알수 있음
commit id : 커밋 메시지가 가리키는 고유한 주소
git diff : 커밋 사이 소스 차이점 알 수 있음 , +:현재 버전, - : 이전 버전
git reset 커밋id --hard : 해당 커밋id로 돌아가기, 과거로 돌아감, 우리집 컴퓨터에 있는버전만 사용할것
인터넷 공유시 reset 사용금지
git revert : 커밋을 취소하면서 새로운 버전 만듬
git commit --help : 커밋메시지에 대한 도움말을 볼수있다
git commit -a : 수정하거나 삭제한 파일을 자동으로 add한다.
git commit -am "커밋메시지" : 수정하거나 삭제한 파일을 자동으로 add한후 커밋메시지를 입력해준다.

수정2
